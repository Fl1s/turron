services:
  eureka-server:
    image: ghcr.io/fl1s/turron/eureka-server:latest
    container_name: eureka-server
    ports:
      - "8761:8761"
    environment:
      SPRING_PROFILES_ACTIVE: prod
      EUREKA_HOSTNAME: eureka-server
    depends_on:
#      - redis
      - postgres

  api-gateway:
    image: ghcr.io/fl1s/turron/api-gateway:latest
    container_name: api-gateway
    ports:
      - "3000:3000"
    environment:
      SPRING_PROFILES_ACTIVE: prod
      EUREKA_INSTANCE_HOSTNAME: eureka-server
      EUREKA_CLIENT_SERVICE_URL_DEFAULT_ZONE: http://eureka-server:8761/eureka/
    depends_on:
      - eureka-server

  upload-service:
    image: ghcr.io/fl1s/turron/upload-service:latest
    container_name: upload-service
    ports:
      - "8091:8091"
    environment:
      SPRING_PROFILES_ACTIVE: prod
      EUREKA_INSTANCE_HOSTNAME: eureka-server
      EUREKA_CLIENT_SERVICE_URL_DEFAULT_ZONE: http://eureka-server:8761/eureka/
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      POSTGRES_DB_URL: jdbc:postgresql://postgres:5432/uploads
      POSTGRES_PG_USERNAME: admin
      POSTGRES_PG_PASSWORD: secret
      POSTGRES_PG_DRIVER: org.postgresql.Driver
      MINIO_BUCKET_NAME: uploads
      MINIO_URL: http://minio:9000
      MINIO_ROOT_USER: admin
      MINIO_ROOT_PASSWORD: secret123
    depends_on:
      - minio
      - eureka-server
      - postgres

  extraction-service:
    image: ghcr.io/fl1s/turron/extraction-service:latest
    container_name: extraction-service
    ports:
      - "8092:8092"
    environment:
      SPRING_PROFILES_ACTIVE: prod
      EUREKA_INSTANCE_HOSTNAME: eureka-server
      EUREKA_CLIENT_SERVICE_URL_DEFAULT_ZONE: http://eureka-server:8761/eureka/
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      POSTGRES_DB_URL: jdbc:postgresql://postgres:5432/frames
      POSTGRES_PG_USERNAME: admin
      POSTGRES_PG_PASSWORD: secret
      POSTGRES_PG_DRIVER: org.postgresql.Driver
      MINIO_BUCKETS_UPLOADS: uploads
      MINIO_BUCKETS_FRAMES: frames
      MINIO_URL: http://minio:9000
      MINIO_ROOT_USER: admin
      MINIO_ROOT_PASSWORD: secret123
    depends_on:
      - eureka-server
      - kafka
      - postgres

  hashing-service:
    image: ghcr.io/fl1s/turron/hashing-service:latest
    container_name: hashing-service
    ports:
      - "8093:8093"
    environment:
      SPRING_PROFILES_ACTIVE: prod
      EUREKA_INSTANCE_HOSTNAME: eureka-server
      EUREKA_CLIENT_SERVICE_URL_DEFAULT_ZONE: http://eureka-server:8761/eureka/
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      POSTGRES_DB_URL: jdbc:postgresql://postgres:5432/hashes
      POSTGRES_PG_USERNAME: admin
      POSTGRES_PG_PASSWORD: secret
      POSTGRES_PG_DRIVER: org.postgresql.Driver
      MINIO_BUCKETS_FRAMES: frames
      MINIO_URL: http://minio:9000
      MINIO_ROOT_USER: admin
      MINIO_ROOT_PASSWORD: secret123
    depends_on:
      - eureka-server
      - postgres

  search-service:
    image: ghcr.io/fl1s/turron/search-service:latest
    container_name: search-service
    ports:
      - "8094:8094"
    environment:
      SPRING_PROFILES_ACTIVE: prod
      EUREKA_INSTANCE_HOSTNAME: eureka-server
      EUREKA_CLIENT_SERVICE_URL_DEFAULT_ZONE: http://eureka-server:8761/eureka/
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      POSTGRES_DB_URL: jdbc:postgresql://postgres:5432/searches
      POSTGRES_PG_USERNAME: admin
      POSTGRES_PG_PASSWORD: secret
      POSTGRES_PG_DRIVER: org.postgresql.Driver
      MINIO_BUCKETS_UPLOADS: uploads
      MINIO_URL: http://minio:9000
      MINIO_ROOT_USER: admin
      MINIO_ROOT_PASSWORD: secret123
    depends_on:
      - eureka-server
      - postgres

  zookeeper:
    image: wurstmeister/zookeeper:latest
    container_name: zookeeper
    environment:
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_LISTENER_PORT: 2181
    ports:
      - "2181:2181"

  kafka:
    container_name: kafka
    image: bitnami/kafka:latest
    restart: on-failure
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:29092,EXTERNAL://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_BROKER_ID: 1
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CFG_ZOOKEEPER_CONNECT: zookeeper:2181
      ALLOW_PLAINTEXT_LISTENER: "yes"
      KAFKA_LISTENERS: "INTERNAL://:29092,EXTERNAL://:9092"
      KAFKA_ZOOKEEPER_SESSION_TIMEOUT: "6000"
      KAFKA_RESTART_ATTEMPTS: "10"
      KAFKA_RESTART_DELAY: "5"
      ZOOKEEPER_AUTOPURGE_PURGE_INTERVAL: "0"
    depends_on:
      - zookeeper

  minio:
    image: minio/minio
    container_name: minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: admin
      MINIO_ROOT_PASSWORD: secret123
    volumes:
      - ~/minio/data:/data
    command: server --console-address :9001 /data

  postgres:
    image: postgres:latest
    container_name: postgres
    environment:
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=secret
      - POSTGRES_DB=users
    ports:
      - "5432:5432"
    restart: unless-stopped

  # Will be added in v1.2-1.4
  #  redis:
  #    image: redis:latest
  #    container_name: redis
  #    volumes:
  #      - redis_data:/data/cache
  #    ports:
  #      - "6379:6379"
  #    command: [ "redis-server" ]

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    networks:
      - monitoring

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3001:3000"
    links:
      - prometheus:prometheus
    volumes:
      - ./monitoring/grafana:/var/lib/grafana
    environment:
      GF_SECURITY_ADMIN_USER: "admin"
      GF_SECURITY_ADMIN_PASSWORD: "secret"
    networks:
      - monitoring

volumes:
  zookeeper_data:
    driver: local
  kafka_data:
    driver: local
  postgres_data:
    driver: local
#  redis_data:
#    driver: local

networks:
  monitoring:
    driver: bridge
