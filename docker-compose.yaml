services:
  nginx:
    image: nginx:stable-alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./.config/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./.config/certbot/www:/var/www/certbot
      - ./.config/certbot/conf:/etc/letsencrypt
    depends_on:
      - eureka-server
      - upload-service
      - extraction-service
      - hashing-service
      - search-service
      - client
      - minio
    networks:
    - program

  certbot:
    image: certbot/certbot
    container_name: certbot
    volumes:
      - ./.config/certbot/www:/var/www/certbot
      - ./.config/certbot/conf:/etc/letsencrypt
    entrypoint: >
      /bin/sh -c "
      trap exit TERM;
      while :; do
        certbot renew --webroot -w /var/www/certbot;
        docker exec nginx nginx -s reload;
        sleep 12h & wait $${!};
      done;"
    networks:
      - program

  cloudflared:
    image: cloudflare/cloudflared:latest
    container_name: cloudflared
    restart: unless-stopped
    command: tunnel --no-autoupdate run --token ${CLOUDFLARE_TUNNEL_TOKEN}
    volumes:
      - ./.config/cloudflared:/etc/cloudflared:ro
    depends_on:
      - nginx
    networks:
      - program

  client:
    image: ghcr.io/fl1s/turron/client:dev-20251003
    ports:
      - "3010:3010"
    networks:
      - program

  eureka-server:
    image: ghcr.io/fl1s/turron/eureka-server:v1.3
    container_name: eureka-server
    ports:
      - "8761:8761"
    environment:
      SPRING_PROFILES_ACTIVE: prod
      EUREKA_HOSTNAME: eureka-server
    depends_on:
      - postgres
    networks:
      - program

  upload-service:
    image: ghcr.io/fl1s/turron/upload-service:v1.3
    container_name: upload-service
    ports:
      - "8091:8091"
    environment:
      SPRING_PROFILES_ACTIVE: prod
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/uploads
      SPRING_DATASOURCE_USERNAME: admin
      SPRING_DATASOURCE_PASSWORD: secret
      SPRING_DATASOURCE_DRIVER_CLASS_NAME: org.postgresql.Driver
      SPRING_JPA_DATABASE_PLATFORM: org.hibernate.dialect.PostgreSQLDialect
      EUREKA_INSTANCE_HOSTNAME: upload-service
      EUREKA_CLIENT_SERVICE_URL_DEFAULT_ZONE: http://eureka-server:8761/eureka/
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      MINIO_URL: http://minio:9000
      MINIO_PUBLIC_URL: http://localhost:9000
      MINIO_BUCKET_NAME: uploads
      MINIO_ROOT_USER: admin
      MINIO_ROOT_PASSWORD: secret123
    depends_on:
      - minio
      - eureka-server
      - postgres
    networks:
      - program

  extraction-service:
    image: ghcr.io/fl1s/turron/extraction-service:v1.3
    container_name: extraction-service
    ports:
      - "8092:8092"
    environment:
      SPRING_PROFILES_ACTIVE: prod
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/frames
      SPRING_DATASOURCE_USERNAME: admin
      SPRING_DATASOURCE_PASSWORD: secret
      SPRING_DATASOURCE_DRIVER_CLASS_NAME: org.postgresql.Driver
      SPRING_JPA_DATABASE_PLATFORM: org.hibernate.dialect.PostgreSQLDialect
      EUREKA_INSTANCE_HOSTNAME: extraction-service
      EUREKA_CLIENT_SERVICE_URL_DEFAULT_ZONE: http://eureka-server:8761/eureka/
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      MINIO_BUCKETS_UPLOADS: uploads
      MINIO_BUCKETS_FRAMES: frames
      MINIO_URL: http://minio:9000
      MINIO_ROOT_USER: admin
      MINIO_ROOT_PASSWORD: secret123
    depends_on:
      - eureka-server
      - kafka
      - postgres
    networks:
      - program

  hashing-service:
    image: ghcr.io/fl1s/turron/hashing-service:v1.3
    container_name: hashing-service
    ports:
      - "8093:8093"
    environment:
      SPRING_PROFILES_ACTIVE: prod
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/hashes
      SPRING_DATASOURCE_USERNAME: admin
      SPRING_DATASOURCE_PASSWORD: secret
      SPRING_DATASOURCE_DRIVER_CLASS_NAME: org.postgresql.Driver
      SPRING_JPA_DATABASE_PLATFORM: org.hibernate.dialect.PostgreSQLDialect
      EUREKA_INSTANCE_HOSTNAME: hashing-service
      EUREKA_CLIENT_SERVICE_URL_DEFAULT_ZONE: http://eureka-server:8761/eureka/
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      MINIO_BUCKETS_FRAMES: frames
      MINIO_URL: http://minio:9000
      MINIO_ROOT_USER: admin
      MINIO_ROOT_PASSWORD: secret123
    depends_on:
      - eureka-server
      - kafka
      - postgres
    networks:
      - program

  search-service:
    image: ghcr.io/fl1s/turron/search-service:v1.3
    container_name: search-service
    ports:
      - "8094:8094"
    environment:
      SPRING_PROFILES_ACTIVE: prod
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/searches
      SPRING_DATASOURCE_USERNAME: admin
      SPRING_DATASOURCE_PASSWORD: secret
      SPRING_DATASOURCE_DRIVER_CLASS_NAME: org.postgresql.Driver
      SPRING_JPA_DATABASE_PLATFORM: org.hibernate.dialect.PostgreSQLDialect
      SPRING_DATA_REDIS_HOST: redis
      SPRING_DATA_REDIS_PORT: 6379
      SPRING_CACHE_TYPE: redis
      SPRING_CACHE_REDIS_TIME_TO_LIVE: 600000
      EUREKA_INSTANCE_HOSTNAME: search-service
      EUREKA_CLIENT_SERVICE_URL_DEFAULT_ZONE: http://eureka-server:8761/eureka/
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      MINIO_BUCKETS_UPLOADS: uploads
      MINIO_URL: http://localhost:9000
      MINIO_ROOT_USER: admin
      MINIO_ROOT_PASSWORD: secret123
    depends_on:
      - eureka-server
      - kafka
      - postgres
    networks:
      - program

  api-gateway:
    image: ghcr.io/fl1s/turron/api-gateway:v1.3
    container_name: api-gateway
    ports:
      - "3000:3000"
    environment:
      SPRING_PROFILES_ACTIVE: prod
      EUREKA_INSTANCE_HOSTNAME: eureka-server
      EUREKA_CLIENT_SERVICE_URL_DEFAULT_ZONE: http://eureka-server:8761/eureka/
    depends_on:
      - eureka-server
      - upload-service
      - extraction-service
      - hashing-service
      - search-service
    networks:
      - program

  kafka:
    container_name: kafka
    image: apache/kafka:latest
    restart: on-failure
    ports:
      - "9092:9092"
    environment:
      KAFKA_KRAFT_MODE: "true"
      KAFKA_PROCESS_ROLES: "broker,controller"
      KAFKA_NODE_ID: 1
      KAFKA_CONTROLLER_QUORUM_VOTERS: "1@kafka:9093"
      KAFKA_LISTENERS: "PLAINTEXT://:9092,CONTROLLER://:9093"
      # KAFKA_ADVERTISED_LISTENERS: "PLAINTEXT://localhost:9092" # dev
      KAFKA_ADVERTISED_LISTENERS: "PLAINTEXT://kafka:9092" # prod
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: "PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT"
      KAFKA_CONTROLLER_LISTENER_NAMES: "CONTROLLER"
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    volumes:
      - kafka_data:/kafka/data
    networks:
      - program


  minio:
    image: minio/minio
    container_name: minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: admin
      MINIO_ROOT_PASSWORD: secret123
    volumes:
#      - ~/minio/data:/data
      - minio_data:/data
    command: server --console-address :9001 /data
    networks:
      - program

  minio-init:
    image: minio/mc
    depends_on:
      - minio
    entrypoint: >
      /bin/sh -c "
      sleep 5;
      mc alias set myminio http://minio:9000 admin secret123;
      mc mb -p myminio/uploads;
      mc mb -p myminio/frames;
      mc ls myminio;
      exit 0;
      "
    networks:
      - program

  postgres:
    image: postgres:latest
    container_name: postgres
    environment:
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=secret
      - POSTGRES_DB=postgres
    ports:
      - "5432:5432"
    volumes:
      - ./.config/initdb:/docker-entrypoint-initdb.d
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    networks:
      - program

  redis:
    image: redis:latest
    container_name: redis
    volumes:
      - redis_data:/data/cache
    ports:
      - "6379:6379"
    command: [ "redis-server" ]
    networks:
      - program

#  prometheus:
#    image: prom/prometheus:latest
#    container_name: prometheus
#    volumes:
#      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
#    ports:
#      - "9090:9090"
#    networks:
#      - monitoring
#
#  grafana:
#    image: grafana/grafana:latest
#    container_name: grafana
#    ports:
#      - "3001:3000"
#    links:
#      - prometheus:prometheus
#    volumes:
#      - ./monitoring/grafana:/var/lib/grafana
#    environment:
#      GF_SECURITY_ADMIN_USER: "admin"
#      GF_SECURITY_ADMIN_PASSWORD: "secret"
#    networks:
#      - monitoring

volumes:
  kafka_data:
  postgres_data:
  redis_data:
  minio_data:
  .config_certbot_conf:
  .config_certbot_www:

networks:
  program:
  monitoring:
    driver: bridge
