services:
  eureka-server:
    image: ghcr.io/fl1s/turron/eureka-server:v1.3-hotfix
    container_name: eureka-server
    ports:
      - "8761:8761"
    environment:
      SPRING_PROFILES_ACTIVE: prod
      EUREKA_HOSTNAME: eureka-server
    depends_on:
      - postgres

  upload-service:
    image: ghcr.io/fl1s/turron/upload-service:v1.3-hotfix
    container_name: upload-service
    ports:
      - "8091:8091"
    environment:
      SPRING_PROFILES_ACTIVE: prod
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/uploads
      SPRING_DATASOURCE_USERNAME: admin
      SPRING_DATASOURCE_PASSWORD: secret
      SPRING_DATASOURCE_DRIVER_CLASS_NAME: org.postgresql.Driver
      SPRING_JPA_DATABASE_PLATFORM: org.hibernate.dialect.PostgreSQLDialect
      EUREKA_INSTANCE_HOSTNAME: upload-service
      EUREKA_CLIENT_SERVICE_URL_DEFAULT_ZONE: http://eureka-server:8761/eureka/
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      MINIO_URL: http://minio:9000
      MINIO_BUCKET_NAME: uploads
      MINIO_ROOT_USER: admin
      MINIO_ROOT_PASSWORD: secret123
    depends_on:
      - minio
      - eureka-server
      - postgres

  extraction-service:
    image: ghcr.io/fl1s/turron/extraction-service:v1.3-hotfix
    container_name: extraction-service
    ports:
      - "8092:8092"
    environment:
      SPRING_PROFILES_ACTIVE: prod
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/frames
      SPRING_DATASOURCE_USERNAME: admin
      SPRING_DATASOURCE_PASSWORD: secret
      SPRING_DATASOURCE_DRIVER_CLASS_NAME: org.postgresql.Driver
      SPRING_JPA_DATABASE_PLATFORM: org.hibernate.dialect.PostgreSQLDialect
      EUREKA_INSTANCE_HOSTNAME: extraction-service
      EUREKA_CLIENT_SERVICE_URL_DEFAULT_ZONE: http://eureka-server:8761/eureka/
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      MINIO_BUCKETS_UPLOADS: uploads
      MINIO_BUCKETS_FRAMES: frames
      MINIO_URL: http://minio:9000
      MINIO_ROOT_USER: admin
      MINIO_ROOT_PASSWORD: secret123
    depends_on:
      - eureka-server
      - kafka
      - postgres

  hashing-service:
    image: ghcr.io/fl1s/turron/hashing-service:v1.3-hotfix
    container_name: hashing-service
    ports:
      - "8093:8093"
    environment:
      SPRING_PROFILES_ACTIVE: prod
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/hashes
      SPRING_DATASOURCE_USERNAME: admin
      SPRING_DATASOURCE_PASSWORD: secret
      SPRING_DATASOURCE_DRIVER_CLASS_NAME: org.postgresql.Driver
      SPRING_JPA_DATABASE_PLATFORM: org.hibernate.dialect.PostgreSQLDialect
      EUREKA_INSTANCE_HOSTNAME: hashing-service
      EUREKA_CLIENT_SERVICE_URL_DEFAULT_ZONE: http://eureka-server:8761/eureka/
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      MINIO_BUCKETS_FRAMES: frames
      MINIO_URL: http://minio:9000
      MINIO_ROOT_USER: admin
      MINIO_ROOT_PASSWORD: secret123
    depends_on:
      - eureka-server
      - kafka
      - postgres

  search-service:
    image: ghcr.io/fl1s/turron/search-service:v1.3-hotfix
    container_name: search-service
    ports:
      - "8094:8094"
    environment:
      SPRING_PROFILES_ACTIVE: prod
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/searches
      SPRING_DATASOURCE_USERNAME: admin
      SPRING_DATASOURCE_PASSWORD: secret
      SPRING_DATASOURCE_DRIVER_CLASS_NAME: org.postgresql.Driver
      SPRING_JPA_DATABASE_PLATFORM: org.hibernate.dialect.PostgreSQLDialect
      SPRING_DATA_REDIS_HOST: redis
      SPRING_DATA_REDIS_PORT: 6379
      SPRING_CACHE_TYPE: redis
      SPRING_CACHE_REDIS_TIME_TO_LIVE: 600000
      EUREKA_INSTANCE_HOSTNAME: search-service
      EUREKA_CLIENT_SERVICE_URL_DEFAULT_ZONE: http://eureka-server:8761/eureka/
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      MINIO_BUCKETS_UPLOADS: uploads
      MINIO_URL: http://localhost:9000
      MINIO_ROOT_USER: admin
      MINIO_ROOT_PASSWORD: secret123
    depends_on:
      - eureka-server
      - kafka
      - postgres

  api-gateway:
    image: ghcr.io/fl1s/turron/api-gateway:v1.3-hotfix
    container_name: api-gateway
    ports:
      - "3000:3000"
    environment:
      SPRING_PROFILES_ACTIVE: prod
      EUREKA_INSTANCE_HOSTNAME: eureka-server
      EUREKA_CLIENT_SERVICE_URL_DEFAULT_ZONE: http://eureka-server:8761/eureka/
    depends_on:
      - eureka-server
      - upload-service
      - extraction-service
      - hashing-service
      - search-service

  kafka:
    container_name: kafka
    image: bitnami/kafka:latest
    restart: on-failure
    ports:
      - "9092:9092"
    environment:
      KAFKA_KRAFT_MODE: "true"
      KAFKA_CFG_PROCESS_ROLES: "broker,controller"
      KAFKA_CFG_NODE_ID: 1
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: "1@kafka:9093"
      KAFKA_CFG_LISTENERS: "PLAINTEXT://:9092,CONTROLLER://:9093"
#      KAFKA_CFG_ADVERTISED_LISTENERS: "PLAINTEXT://localhost:9092" #dev
      KAFKA_CFG_ADVERTISED_LISTENERS: "PLAINTEXT://kafka:9092" #prod
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: "PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT"
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: "CONTROLLER"
      KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: "true"
      ALLOW_PLAINTEXT_LISTENER: "yes"
    volumes:
      - kafka_data:/bitnami/kafka

  minio:
    image: minio/minio
    container_name: minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: admin
      MINIO_ROOT_PASSWORD: secret123
    volumes:
      - ~/minio/data:/data
    command: server --console-address :9001 /data

  minio-init:
    image: minio/mc
    depends_on:
      - minio
    entrypoint: >
      /bin/sh -c "
      sleep 5;
      mc alias set myminio http://minio:9000 admin secret123;
      mc mb -p myminio/uploads;
      mc mb -p myminio/frames;
      mc ls myminio;
      exit 0;
      "

  postgres:
    image: postgres:latest
    container_name: postgres
    environment:
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=secret
      - POSTGRES_DB=postgres
    ports:
      - "5432:5432"
    volumes:
      - ./.config/initdb:/docker-entrypoint-initdb.d
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped

  redis:
    image: redis:latest
    container_name: redis
    volumes:
      - redis_data:/data/cache
    ports:
      - "6379:6379"
    command: [ "redis-server" ]

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    networks:
      - monitoring

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3001:3000"
    links:
      - prometheus:prometheus
    volumes:
      - ./monitoring/grafana:/var/lib/grafana
    environment:
      GF_SECURITY_ADMIN_USER: "admin"
      GF_SECURITY_ADMIN_PASSWORD: "secret"
    networks:
      - monitoring

volumes:
  kafka_data:
    driver: local
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  monitoring:
    driver: bridge