services:
  nginx:
    image: nginx:stable-alpine
    container_name: nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./.config/nginx/nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - eureka-server
      - upload-service
      - extraction-service
      - hashing-service
      - search-service
      - client
      - minio
    networks:
      - program

  cloudflare:
    image: cloudflare/cloudflared:latest
    container_name: cloudflared
    restart: unless-stopped
    command: tunnel --no-autoupdate run --url http://nginx:80
    environment:
      TUNNEL_TOKEN: ${CLOUDFLARE_TUNNEL_TOKEN}
    depends_on:
      - nginx
    networks:
      - program

#  client:
#    image: ghcr.io/fl1s/turron/client:${CLIENT_TAG}
#    container_name: client
#    ports:
#      - "3010:3010"
#    networks:
#      - program

  eureka-server:
    image: ghcr.io/fl1s/turron/eureka-server:${EUREKA_TAG}
    container_name: eureka-server
    ports:
      - "8761:8761"
    environment:
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE}
      EUREKA_HOSTNAME: ${EUREKA_HOSTNAME}
    depends_on:
      - postgres
    networks:
      - program

  upload-service:
    image: ghcr.io/fl1s/turron/upload-service:${UPLOAD_TAG}
    container_name: upload-service
    ports:
      - "8091:8091"
    environment:
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE}
      SPRING_DATASOURCE_URL: jdbc:postgresql://${POSTGRES_HOST}:${POSTGRES_PORT}/uploads
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}
      SPRING_DATASOURCE_DRIVER_CLASS_NAME: ${SPRING_DATASOURCE_DRIVER_CLASS_NAME}
      SPRING_JPA_DATABASE_PLATFORM: ${SPRING_JPA_DATABASE_PLATFORM}
      EUREKA_INSTANCE_HOSTNAME: upload-service
      EUREKA_CLIENT_SERVICE_URL_DEFAULT_ZONE: ${EUREKA_CLIENT_SERVICE_URL_DEFAULT_ZONE}
      KAFKA_BOOTSTRAP_SERVERS: ${KAFKA_BOOTSTRAP_SERVERS}
      MINIO_URL: ${MINIO_URL}
      MINIO_PUBLIC_URL: ${MINIO_PUBLIC_URL}
      MINIO_BUCKET_NAME: ${MINIO_BUCKET_UPLOADS}
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    depends_on:
      - minio
      - eureka-server
      - postgres
    networks:
      - program

  extraction-service:
    image: ghcr.io/fl1s/turron/extraction-service:${EXTRACTION_TAG}
    container_name: extraction-service
    ports:
      - "8092:8092"
    environment:
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE}
      SPRING_DATASOURCE_URL: jdbc:postgresql://${POSTGRES_HOST}:${POSTGRES_PORT}/frames
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}
      SPRING_DATASOURCE_DRIVER_CLASS_NAME: ${SPRING_DATASOURCE_DRIVER_CLASS_NAME}
      SPRING_JPA_DATABASE_PLATFORM: ${SPRING_JPA_DATABASE_PLATFORM}
      EUREKA_INSTANCE_HOSTNAME: extraction-service
      EUREKA_CLIENT_SERVICE_URL_DEFAULT_ZONE: ${EUREKA_CLIENT_SERVICE_URL_DEFAULT_ZONE}
      KAFKA_BOOTSTRAP_SERVERS: ${KAFKA_BOOTSTRAP_SERVERS}
      MINIO_BUCKETS_UPLOADS: ${MINIO_BUCKET_UPLOADS}
      MINIO_BUCKETS_FRAMES: ${MINIO_BUCKET_FRAMES}
      MINIO_URL: ${MINIO_URL}
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    depends_on:
      - eureka-server
      - kafka
      - postgres
    networks:
      - program

  hashing-service:
    image: ghcr.io/fl1s/turron/hashing-service:${HASHING_TAG}
    container_name: hashing-service
    ports:
      - "8093:8093"
    environment:
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE}
      SPRING_DATASOURCE_URL: jdbc:postgresql://${POSTGRES_HOST}:${POSTGRES_PORT}/hashes
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}
      SPRING_DATASOURCE_DRIVER_CLASS_NAME: ${SPRING_DATASOURCE_DRIVER_CLASS_NAME}
      SPRING_JPA_DATABASE_PLATFORM: ${SPRING_JPA_DATABASE_PLATFORM}
      EUREKA_INSTANCE_HOSTNAME: hashing-service
      EUREKA_CLIENT_SERVICE_URL_DEFAULT_ZONE: ${EUREKA_CLIENT_SERVICE_URL_DEFAULT_ZONE}
      KAFKA_BOOTSTRAP_SERVERS: ${KAFKA_BOOTSTRAP_SERVERS}
      MINIO_BUCKETS_FRAMES: ${MINIO_BUCKET_FRAMES}
      MINIO_URL: ${MINIO_URL}
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    depends_on:
      - eureka-server
      - kafka
      - postgres
    networks:
      - program

  search-service:
    image: ghcr.io/fl1s/turron/search-service:${SEARCH_TAG}
    container_name: search-service
    ports:
      - "8094:8094"
    environment:
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE}
      SPRING_DATASOURCE_URL: jdbc:postgresql://${POSTGRES_HOST}:${POSTGRES_PORT}/searches
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}
      SPRING_DATASOURCE_DRIVER_CLASS_NAME: ${SPRING_DATASOURCE_DRIVER_CLASS_NAME}
      SPRING_JPA_DATABASE_PLATFORM: ${SPRING_JPA_DATABASE_PLATFORM}
      SPRING_DATA_REDIS_HOST: ${REDIS_HOST}
      SPRING_DATA_REDIS_PORT: ${REDIS_PORT}
      SPRING_CACHE_TYPE: redis
      SPRING_CACHE_REDIS_TIME_TO_LIVE: 600000
      EUREKA_INSTANCE_HOSTNAME: search-service
      EUREKA_CLIENT_SERVICE_URL_DEFAULT_ZONE: ${EUREKA_CLIENT_SERVICE_URL_DEFAULT_ZONE}
      KAFKA_BOOTSTRAP_SERVERS: ${KAFKA_BOOTSTRAP_SERVERS}
      MINIO_BUCKETS_UPLOADS: ${MINIO_BUCKET_UPLOADS}
      MINIO_URL: ${MINIO_URL}
      MINIO_PUBLIC_URL: ${MINIO_PUBLIC_URL}
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    depends_on:
      - eureka-server
      - kafka
      - postgres
    networks:
      - program

  api-gateway:
    image: ghcr.io/fl1s/turron/api-gateway:${GATEWAY_TAG}
    container_name: api-gateway
    ports:
      - "3000:3000"
    environment:
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE}
      EUREKA_INSTANCE_HOSTNAME: ${EUREKA_HOSTNAME}
      EUREKA_CLIENT_SERVICE_URL_DEFAULT_ZONE: ${EUREKA_CLIENT_SERVICE_URL_DEFAULT_ZONE}
    depends_on:
      - eureka-server
      - upload-service
      - extraction-service
      - hashing-service
      - search-service
    networks:
      - program

  kafka:
    container_name: kafka
    image: apache/kafka:latest
    restart: on-failure
    ports:
      - "9092:9092"
    environment:
      KAFKA_KRAFT_MODE: "true"
      KAFKA_PROCESS_ROLES: "broker,controller"
      KAFKA_NODE_ID: 1
      KAFKA_CONTROLLER_QUORUM_VOTERS: "1@kafka:9093"
      KAFKA_LISTENERS: "PLAINTEXT://:9092,CONTROLLER://:9093"
      KAFKA_ADVERTISED_LISTENERS: "PLAINTEXT://${KAFKA_ADVERTISED_LISTENER}"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: "PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT"
      KAFKA_CONTROLLER_LISTENER_NAMES: "CONTROLLER"
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    volumes:
      - kafka_data:/kafka/data
    networks:
      - program

  minio:
    image: quay.io/minio/minio:latest
    container_name: minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_SERVER_URL: ${MINIO_PUBLIC_URL}
      MINIO_BROWSER_REDIRECT_URL: ${MINIO_PUBLIC_URL}
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    volumes:
      - minio_data:/data
    command: server --console-address :9001 /data
    networks:
      - program

  minio-init:
    image: minio/mc
    depends_on:
      - minio
    entrypoint: >
      /bin/sh -c "
      sleep 5;
      mc alias set myminio ${MINIO_URL} ${MINIO_ROOT_USER} ${MINIO_ROOT_PASSWORD};
      mc mb -p myminio/${MINIO_BUCKET_UPLOADS};
      mc mb -p myminio/${MINIO_BUCKET_FRAMES};
      mc ls myminio;
      exit 0;
      "
    networks:
      - program

  postgres:
    image: postgres:latest
    container_name: postgres
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - ./.config/initdb:/docker-entrypoint-initdb.d
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    networks:
      - program

  redis:
    image: redis:latest
    container_name: redis
    volumes:
      - redis_data:/data/cache
    ports:
      - "6379:6379"
    command: [ "redis-server" ]
    networks:
      - program

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    networks:
      - monitoring

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3001:3000"
    links:
      - prometheus:prometheus
    volumes:
      - ./monitoring/grafana:/var/lib/grafana
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_USER}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASS}
    networks:
      - monitoring

volumes:
  kafka_data:
  postgres_data:
  redis_data:
  minio_data:

networks:
  program:
  monitoring:
    driver: bridge