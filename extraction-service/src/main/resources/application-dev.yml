eureka:
  instance:
    hostname: ${EUREKA_INSTANCE_HOSTNAME}
  client:
    registerWithEureka: true
    fetchRegistry: true
    serviceUrl:
      defaultZone: ${EUREKA_CLIENT_SERVICE_URL_DEFAULT_ZONE}

spring:
  config:
    import: file:extraction-service/.env.dev[.properties]

  kafka:
    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS}

    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer

    consumer:
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.ErrorHandlingDeserializer
      properties:
        spring.deserializer.value.delegate.class: org.springframework.kafka.support.serializer.JsonDeserializer
        spring.json.trusted.packages: "*"

    listener:
      ack-mode: record

    admin:
      auto-create: false

  datasource:
    url: ${POSTGRES_DB_URL}
    username: ${POSTGRES_PG_USERNAME}
    password: ${POSTGRES_PG_PASSWORD}
    driver-class-name: ${POSTGRES_PG_DRIVER}

minio:
  buckets:
    uploads: ${MINIO_BUCKETS_UPLOADS}
    frames: ${MINIO_BUCKETS_FRAMES}
  url: ${MINIO_URL}
  root-user: ${MINIO_ROOT_USER}
  root-password: ${MINIO_ROOT_PASSWORD}
